require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')

describe Requisicao do

  before(:each) do
    @valid_attributes = {
      :solicitante_id => "5",
      :cargo_ou_funcao => "professor",
      :telefone_ou_ramal => "22222",
      :celular => "2020202",
      :laboratorio_ou_setor => "LBR",
      :predio => "P5",
      :andar => "3º",
      :sala => "109",
      :data_de_reserva => "18/11/2009",
      :veiculo => "Automóvel - até 4 passageiros",
      :objetivo_da_reserva => "gasvchgsvchjsvdc",
      :outros => "vfdsvdfvfdv",
      :nome_telefone_passageiros => "fhjdsvcdsvghsvd",
      :roteiro_da_agenda => "djvsdghvsvdsv",
      :observacao => "bfdbfdbdfbfdbd",
      :chave_de_seguranca => "a6170a5d995e53fe01f9b02f60e3bbc1c2bfcc74",
      :estado => Requisicao::ESPERA,
      :motivo => "",
      :tipo => nil,
      :referencia_id => nil,
      :viagem_id => "12"
    }
  end

  it "Deve criar uma nova instancia com valores válidos" do
    Requisicao.create!(@valid_attributes)
  end


  it "deve aceitar uma requisição" do
    requisicao = Factory.create :requisicao
    requisicao.aceitar :motorista => mock_model(Motorista)
    requisicao.estado.should == Requisicao::ACEITA
  end

  context "Validações:" do

      should_validate_presence_of :cargo_ou_funcao,
                                  :telefone_ou_ramal,
                                  :laboratorio_ou_setor,
                                  :sala,
                                  :data_de_reserva,
                                  :nome_telefone_passageiros,
                                  :roteiro_da_agenda

    it "O campo Prédio deve ser diferente de Selecione um Prédio" do
      requisicao = Factory.build :requisicao, :predio => "Selecione um Prédio"
      requisicao.save.should be_false
      requisicao.errors.invalid?(:predio).should be_true
    end

    it "O campo Andar deve ser diferente de Selecione um Andar" do
      requisicao = Factory.build :requisicao, :andar => "Selecione um Andar"
      requisicao.save.should be_false
      requisicao.errors.invalid?(:andar).should be_true
    end

    it "O campo Veículo deve ser diferente de Selecione um Veículo" do
      requisicao = Factory.build :requisicao, :veiculo => "Selecione um Veículo"
      requisicao.save.should be_false
      requisicao.errors.invalid?(:veiculo).should be_true
    end

    it "O campo Objetivo da reserva deve ser diferente de Selecione um Objetivo" do
      requisicao = Factory.build :requisicao, :objetivo_da_reserva => "Selecione um Objetivo"
      requisicao.save.should be_false
      requisicao.errors.invalid?(:objetivo_da_reserva).should be_true
    end

    it "O campo Descrição de Outros não deve ser nulo quando Objetivo da reserva for Outros" do
      requisicao = Factory.build :requisicao, :outros => "", :objetivo_da_reserva => "Outros"
      requisicao.save.should be_false
      requisicao.errors.invalid?(:outros).should be_true
    end

    it "O campo Motivo não deve ser nulo quando Estado for Cancelado pelo Professor" do
      requisicao = Factory.build :requisicao, :estado => Requisicao::CANCELADO_PELO_PROFESSOR, :motivo => ""
      requisicao.save.should be_false
      requisicao.errors.invalid?(:motivo).should be_true
    end

    it "A data de requisição deve ser marcada com no mínimo 2 dias de antecedência" do
      requisicao = Factory.build :requisicao, :data_de_reserva => Date.tomorrow.tomorrow
      requisicao.save.should be_true
    end

    it "O ano da data de requisição tem que ser o mesmo do ano corrente" do
      requisicao = Factory.build :requisicao, :data_de_reserva => Date.today.years_since(1)
      requisicao.save.should be_false
      requisicao.errors.invalid?(:data_de_reserva).should be_true
    end

  end

  it "deve fornecer a lista de prédios" do
    Requisicao.predio.should have(17).predio
    Requisicao.predio.should include("Selecione um Prédio",
                                      "Reitoria - E1",
                                      "CCT - Prédio",
                                      "CCT - Anexo",
                                      "CCT - Oficinas",
                                      "CBB - Prédio",
                                      "CBB - Anexo",
                                      "CCTA - Prédio",
                                      "CCTA - Anexo",
                                      "CCTA - Pesagro",
                                      "CCTA - Escola Agrícola",
                                      "CCTA - Itaocara",
                                      "CCH - Prédio",
                                      "P4",
                                      "P5",
                                      "Villa Maria",
                                      "LENEP - Macaé")
  end

  it "deve fornecer a lista de andares" do
    Requisicao.andar.should have(4).andar
    Requisicao.andar.should include("Selecione um Andar",
                                    "Térreo",
                                    "1º andar",
                                    "2º andar")
  end

  it "deve fornecer a lista de veículos" do
    Requisicao.veiculo.should have(8).veiculo
    Requisicao.veiculo.should include("Selecione um Veículo",
                                      "Automóvel - até 4 passageiros",
                                      "Micro-ônibus - até 32 passageiros",
                                      "Micro-ônibus - até 25 passageiros",
                                      "Utilitário sem carroceria - até 8 passageiros",
                                      "Utilitário com carroceria - até 1 passageiro (400kg)",
                                      "Utilitário com carroceria - até 2 passageiros (800kg)",
                                      "Utilitário com carroceria - até 4 passageiros (600kg)")
  end

  it "deve fornecer a lista de objetivos" do
    Requisicao.objetivo.should have(13).objetivo
    Requisicao.objetivo.should include("Selecione um Objetivo",
                                        "Aula de Campo",
                                        "Compras",
                                        "Malote ou Correspondência",
                                        "Trabalho de Campo",
                                        "Visita Técnica",
                                        "Transporte de Pessoal",
                                        "Transporte de Equipamento Natural",
                                        "Participações em Eventos (micro-ônibus",
                                        "Participações em Reuniões",
                                        "Serviços Administrativos",
                                        "Serviços Técnicos",
                                        "Outros")
  end

  it "deve instanciar um objeto requisição dados os atributos próprios e os dados do solicitante" do
    dados_solicitante = {:matricula => "01210", :email => "professor@uenf.br"}
    solicitante = Factory.create :solicitante, dados_solicitante
    requisicao = Requisicao.verificarSolicitante dados_solicitante,
                                      {:cargo_ou_funcao => "asdasdasd",
                                        :telefone_ou_ramal => "asdasdasd",
                                        :laboratorio_ou_setor => "asdasdasd",
                                        :sala => "asdasdasd",
                                        :data_de_reserva_br => Date.tomorrow.tomorrow.to_date.to_s_br,
                                        :nome_telefone_passageiros  => "asdasdasd",
                                        :roteiro_da_agenda  => "asdasdasd",
                                        :andar => "asdasdasd", :predio => "asdasdasd"
                        }
    requisicao.should_not be_nil
    requisicao.should be_valid
    requisicao.solicitante_id.should == solicitante.id
  end


  it "Deve retornar falso caso não tenha marcado as regras" do
    requisicao = Factory.build :requisicao, :termo => "0"
    requisicao.save.should be_false
  end

  it "Deve retornar verdadeiro caso tenha marcado as regras" do
    requisicao = Factory.build :requisicao, :termo => "1"
    requisicao.save.should be_true
  end

  it "Deve retornar uma lista contendo 2 objetos de requisição" do
    dados_solicitante = {:matricula => "01210", :email => "professor@uenf.br"}
    solicitante = Factory.create :solicitante, dados_solicitante
    dados_requisicao = {:cargo_ou_funcao => "asdasdasd",
                        :telefone_ou_ramal => "asdasdasd",
                        :laboratorio_ou_setor => "asdasdasd",
                        :predio => "Reitoria - E1",
                        :andar => "Térreo",
                        :sala => "asdasdasd",
                        :data_de_reserva_br => Date.tomorrow.tomorrow.to_date.to_s_br,
                        :nome_telefone_passageiros  => "asdasdasd",
                        :roteiro_da_agenda  => "asdasdasd"
                        }

    requisicao = Requisicao.instanciarRequisicoes(dados_requisicao,
                Date.tomorrow.tomorrow.tomorrow.to_date.to_s_br,
                "volta", dados_requisicao[:roteiro_da_agenda], solicitante.id)
    requisicao.should have(2).requisicoes
  end

  it "Deve retornar uma lista contendo 1 objetos de requisição" do
    dados_solicitante = {:matricula => "01210", :email => "professor@uenf.br"}
    solicitante = Factory.create :solicitante, dados_solicitante
    dados_requisicao = {:cargo_ou_funcao => "asdasdasd",
                        :telefone_ou_ramal => "asdasdasd",
                        :laboratorio_ou_setor => "asdasdasd",
                        :predio => "Reitoria - E1",
                        :andar => "Térreo",
                        :sala => "asdasdasd",
                        :data_de_reserva_br => Date.tomorrow.tomorrow.to_date.to_s_br,
                        :nome_telefone_passageiros  => "asdasdasd",
                        :roteiro_da_agenda  => "asdasdasd"
                        }

        requisicao = Requisicao.instanciarRequisicoes(dados_requisicao,
                "",
                "ida", dados_requisicao[:roteiro_da_agenda], solicitante.id)

    requisicao.should have(1).requisicoes
  end

  it "Deve dar erro caso a data seja vazia" do
    requisicao = Factory.build :requisicao, :data_de_reserva => ""
    requisicao.save.should be_false
    requisicao.errors.invalid?(:data_de_reserva).should be_true
  end


  it "Deve salvar a requisição de ida e volta com os respectivos protocolos para a referência" do
    requisicao_ida = Factory.build :requisicao
    requisicao_volta = Factory.build :requisicao

    confirmacao = requisicao_ida.registrarVolta requisicao_volta

    resultado = Requisicao.find(requisicao_ida.id)
    resultado.referencia_id.should == requisicao_volta.id.to_s

    resultado = Requisicao.find(requisicao_volta.id)
    resultado.referencia_id.should == requisicao_ida.id.to_s

    confirmacao.should be_true

  end

  it "Deve retornar um objeto com erros caso a requisição não seja válida" do
    requisicao_ida = Factory.build :requisicao, :cargo_ou_funcao => ""
    requisicao_volta = Factory.build :requisicao, :cargo_ou_funcao => "Selecione um cargo"
    confirmacao = requisicao_ida.registrarVolta requisicao_volta

    confirmacao.valid?.should be false
  end

end

